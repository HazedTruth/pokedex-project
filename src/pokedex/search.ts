import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../app/store';
import { suggestions } from './autosuggest';

export interface SearchState {
  term: string;
  current: string;
  suggestions: string[];
  history: string[];
}

const initialState: SearchState = {
  term: "",
  current: "",
  suggestions: [],
  history: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const suggestionsAsync = createAsyncThunk(
  'search/fetchSuggestions',
  async (current: string) => {
    // The value we return becomes the `fulfilled` action payload
    return await suggestions(current);
  }
);

export const searchSlice = createSlice({
  name: 'search',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateCurrent: (state, current: PayloadAction<string>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.current = current.payload;
    },
    search: (state) => {
      state.term = state.current;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(suggestionsAsync.pending, (state) => {
        state.suggestions = [];
      })
      .addCase(suggestionsAsync.fulfilled, (state, action) => {
        if (action.payload.term === state.current) {
          state.suggestions = action.payload.suggestions;
        }
      });
      // .addCase(suggestionsAsync.rejected, (state) => {
      //   // state.status = 'failed';
      // });
  },
});

export const { updateCurrent, search } = searchSlice.actions;

export const selectSearchTerm = (state: RootState) => state.search.term;
export const selectSearchCurrent = (state: RootState) => state.search.current;
export const selectSearchSuggestions = (state: RootState) => state.search.suggestions;

export default searchSlice.reducer;
